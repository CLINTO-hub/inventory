# Inventory Management API

## Overview
This is an Inventory Management API built with Node.js, Express, and TypeORM. It allows users to add, update, check stock levels, and generate reports for inventory items.

## Features
- Add single or bulk inventory items
- List inventory with filters
- Update inventory details
- Stock check-in and check-out
- Generate inventory reports with sorting and filtering options

## Installation

### Prerequisites
- Node.js (Latest LTS recommended)
- PostgreSQL or any other compatible database

### Steps
1. Clone the repository:
   ```sh
   git clone <repo-url>
   cd inventory-management-api
   ```
2. Install dependencies:
   ```sh
   npm install
   ```
3. Configure the database in `database/connection.js`:
   ```js
   import { DataSource } from "typeorm";
   
   export const AppDataSource = new DataSource({
       type: "postgres", // Change based on your database
       host: "localhost",
       port: 5432,
       username: "your_db_user",
       password: "your_db_password",
       database: "your_db_name",
       synchronize: true,
       entities: ["../models/*.js"],
   });
   ```
4. Run the server:
   ```sh
   npm run dev
   ```

## API Endpoints

### 1. Add Single Inventory Item
**POST** `/addinventory`
#### Request Body
```json
{
  "name": "Laptop",
  "description": "Gaming Laptop",
  "quantity": 10,
  "price": 1200.50
}
```
#### Response
```json
{
  "message": "Inventory added successfully",
  "inventory": { "id": 1, "name": "Laptop", "quantity": 10, "price": 1200.50 }
}
```

### 2. Add Bulk Inventory Items
**POST** `/addbulkinventory`
#### Request Body
```json
{
  "items": [
    { "name": "Keyboard", "description": "Mechanical", "quantity": 50, "price": 50 },
    { "name": "Mouse", "description": "Wireless", "quantity": 30, "price": 30 }
  ]
}
```
#### Response
```json
{
  "message": "Bulk inventory added",
  "data": [...]
}
```

### 3. List Inventory
**GET** `/list`
#### Query Parameters (Optional)
- `name`: Search by item name
- `minPrice` / `maxPrice`: Filter by price range
- `minQuantity` / `maxQuantity`: Filter by quantity range
#### Example Request
```
GET /list?minPrice=100&maxPrice=1000
```
#### Response
```json
{
  "message": "Inventory list retrieved",
  "data": [...]
}
```

### 4. Update Inventory
**PUT** `/update/:id`
#### Request Body
```json
{
  "name": "Gaming Laptop",
  "description": "High-end Gaming Laptop",
  "quantity": 15,
  "price": 1500
}
```
#### Response
```json
{
  "message": "Inventory updated successfully",
  "data": { "id": 1, "name": "Gaming Laptop", "quantity": 15, "price": 1500 }
}
```

### 5. Stock Check-In
**PUT** `/stock-in/:id`
#### Request Body
```json
{
  "quantity": 5
}
```
#### Response
```json
{
  "message": "Stock checked in",
  "data": { "id": 1, "quantity": 20 }
}
```

### 6. Stock Check-Out
**PUT** `/stock-out/:id`
#### Request Body
```json
{
  "quantity": 3
}
```
#### Response
```json
{
  "message": "Stock checked out",
  "data": { "id": 1, "quantity": 17 }
}
```

### 7. Generate Reports
**GET** `/report`
#### Query Parameters (Optional)
- `name`: Filter by item name
- `minPrice`, `maxPrice`: Filter by price range
- `minQuantity`, `maxQuantity`: Filter by quantity range
- `status`: `in-stock` or `out-of-stock`
- `startDate`, `endDate`: Filter by creation date
- `sortBy`: `name`, `price`, `quantity`, `created_at`
- `sortOrder`: `ASC` or `DESC`
#### Example Request
```
GET /report?status=in-stock&sortBy=price&sortOrder=ASC
```
#### Response
```json
{
  "message": "Report generated",
  "data": [...]
}
```

## Running the API
Start the server using:
```sh
npm start
```

## Conclusion
This API provides an efficient way to manage an inventory system, allowing users to add, update, and monitor stock levels. For any improvements or issues, feel free to contribute or raise an issue!

---

Let me know if you need modifications! ðŸš€

